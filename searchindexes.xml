<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>mysql断电恢复</title><url>/post/mysql%E6%96%AD%E7%94%B5%E6%81%A2%E5%A4%8D/</url><categories><category>mysql</category></categories><tags><tag>mysql</tag></tags><content type="html"><![CDATA[  需求 服务器意外断电，导致mysql启动不了
强制恢复后备份 进入恢复模式 在 /etc/my.cnf中添加如下配置：
1 2 [mysqld] innodb_force_recovery = 1 其中后面的值设置为1、如果1不能启动成功，再逐步增加为2/3/4/5/6等。直到能启动mysql为止！！！
(SRV_FORCE_IGNORE_CORRUPT):忽略检查到的corrupt页。 (SRV_FORCE_NO_BACKGROUND):阻止主线程的运行，如主线程需要执行full purge操作，会导致crash。 (SRV_FORCE_NO_TRX_UNDO):不执行事务回滚操作。 (SRV_FORCE_NO_IBUF_MERGE):不执行插入缓冲的合并操作。 (SRV_FORCE_NO_UNDO_LOG_SCAN):不查看重做日志，InnoDB存储引擎会将未提交的事务视为已提交。 (SRV_FORCE_NO_LOG_REDO):不执行前滚的操作。 启动mysql服务 systemctl start mysqld
mysqldump备份 mysqldump -u root -p 123456 xxx &gt; xxx_backup.sql
还原 停止mysql服务 systemctl stop mysqld
注释恢复模式,设置新的数据目录 在 /etc/my.cnf中添加如下配置：
1 2 3 4 5 [mysqld] # 恢复模式 # innodb_force_recovery = 1 datadir=/home/data/mysql socket=/home/data/mysql/mysql.sock 新建并配置新的数据目录 cp -r /xxx/mysql /xxx/mysql_bak
mkdir -p /home/data/mysql
chown -R mysql:mysql /home/data/mysql
chmod 750 /home/data/mysql
重新初始化配置内容 mysqld &ndash;defaults-file=/etc/my.cnf &ndash;initialize &ndash;user=mysql
关闭selinux 查看selinux状态 getenforce
临时关闭 setenforce 0
永久关闭(需要重启系统) vim /etc/selinux/config SELINUX=disabled
启动mysqld systemctl start mysqld
获取初始密码 grep &rsquo;temporary password&rsquo; /var/log/mysqld.log
登录,创建新数据库,设置登录密码,设置允许网络访问 mysql -u root -p
create schema xxx;
use mysql;
ALTER USER &lsquo;root&rsquo;@&rsquo;localhost&rsquo; IDENTIFIED BY &lsquo;xxxx&rsquo;; #更新域属性，&rsquo;%&lsquo;表示允许外部访问 update user set host =&rsquo;%&rsquo; where user =&lsquo;root&rsquo;; #授权 GRANT ALL PRIVILEGES ON . TO &lsquo;root&rsquo;@&rsquo;%&lsquo;WITH GRANT OPTION; #刷新权限 FLUSH PRIVILEGES; #退出mysql quit;
如果输入密码，提示错误。 SQLSTATE[HY000] [2002] Can&rsquo;t connect to local MySQL server through socket &lsquo;/var/lib/mysql/mysql.sock&rsquo; (mysql.sock是服务启动时候生成的文件)
ln -s /home/data/mysql/mysql.sock /var/lib/mysql/mysql.sock
mysql还原 mysql -u root -p 123456 xxx &lt; xxx_backup.sql
  ]]></content></entry><entry><title>mysql记录去重</title><url>/post/mysql%E8%AE%B0%E5%BD%95%E5%8E%BB%E9%87%8D/</url><categories><category>mysql</category></categories><tags><tag>mysql</tag></tags><content type="html">  需求 由于某些原因，数据库表中出现了一下重复数据
查询重复数据 1 select * from member where mobile in (select mobile from member group by mobile having count(*)&amp;gt;1); 删除其他重复记录保留最新一条 1 delete from member where id not in (select t.max_id from (select max(id) as max_id from member group by mobile having count(*)&amp;gt;1) as t);   </content></entry><entry><title>rsync使用</title><url>/post/rsync%E4%BD%BF%E7%94%A8/</url><categories><category>linux</category></categories><tags><tag>linux</tag></tags><content type="html">  需求 玩Linux，经常需要重装系统，所以我的文件都是放 /data 目录下，data 目录是一个独立的分区，每次重装系统时只需要重新挂载分区到 /data 目录即可，非常方便。配合 konsave 工具和软件安装脚本，基本上十多分钟就可以恢复系统原样。对 data 目录的备份至关重要。 工作时经常需要在生产环境进行软件部署，有时可能只改了几个文件，也需要重新上传全量包到生产环境，其实完全没必要，更新修改的文件即可。 rsync的优点 会检查发送方和接收方已有的文件，仅传输有变动的部分 支持断点续传，可替代sftp使用 rsync使用( 参考 ) 1 rsync -avzc --delete --partial --append-verify --progress -e &amp;#34;ssh -p 22&amp;#34; /xxx/xxx root@x.x.x.x:/yyy/yyy -a 表示存档模式，保存所有的元数据，比如修改时间（modification time）、权限、所有者等 -v 表示输出细节。=-vv=表示输出更详细的信息，=-vvv=表示输出最详细的信息。 -z 表示指定同步时压缩数据 -c 默认情况下，rsync 只检查文件的大小和最后修改日期是否发生变化，如果发生变化，就重新传输；使用这个参数以后，则通过判断文件内容的校验和，决定是否重新传输。 --delete 删除目标目录下的多余文件，使得目标目录成为源目录的镜像副本 --partila 表示允许恢复中断的传输 --append-verify 表示接着上次中断的地方继续传输，并对传输完成后的文件进行一次校验。如果校验失败，将重新发送整个文件。 --progress 表示显示进展 -e 指定使用 SSH 协议传输数据   </content></entry><entry><title>浏览器渲染问题</title><url>/post/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/</url><categories><category>web</category></categories><tags><tag>web</tag></tags><content type="html">  src里的访问路径 src路径会自动将 \ 替换为 /
src里的中文会自动转码   </content></entry><entry><title>docker启动异常</title><url>/post/docker%E5%90%AF%E5%8A%A8%E5%BC%82%E5%B8%B8/</url><categories><category>docker</category></categories><tags><tag>docker</tag></tags><content type="html"><![CDATA[  异常一 dockerd 启动提示：(docker0): networks have same bridge name 原因分析 使用 docker-compose 的方式部署时，默认的网络模式是bridge , 默认网段是172.17.0.1/16，即docker0。自动生成的网桥会依次使用：172.18.x.x ,172.19.x.x&hellip;. 这些docker生成的网段可能与内网网段有冲突。
解决方法 编辑docker配置文件 /etc/docker/daemon.json
添加以下内容
1 2 3 &#34;debug&#34;: true, &#34;bip&#34;: &#34;100.100.1.1/24&#34;, &#34;default-address-pools&#34;:[{&#34;base&#34;:&#34;100.100.0.0/16&#34;,&#34;size&#34;:24}], 删除有冲突的bridge，并重启docker
1 2 3 ip link delete docker0 ip link delete xxx dockerd 如果 dockerd 还是提示同样的错误，可能是之前 docker compose	配置
文件里设置的自动重启的配置(restart: always)。且docker配置文件中配置了 data-root，需移除该配置目录，并创建一个新目录。以此来删除 docker compose 中自动重启的配置。
1 2 3 mv data-root配置的目录 xxx mkdir -p data-root配置的目录 dockerd   ]]></content></entry><entry><title>docker容器人大金仓数据迁移到mysql</title><url>/post/docker%E5%AE%B9%E5%99%A8%E4%BA%BA%E5%A4%A7%E9%87%91%E4%BB%93%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E5%88%B0mysql/</url><categories><category>database</category></categories><tags><tag>database</tag><tag>docker</tag></tags><content type="html"><![CDATA[  方法一：用官方迁移工具KDTS 同事告知，用KDTS，从mysql迁移到人大金仓数据库没问题。但从人大金仓数据库迁移到mysql会失败，原因未明。 KDTS工具为安装人大金仓数据库自带，没有独立版本。 docker版本的人大金仓数据库没有此公具。
方法二：用navicat的数据传输 网上找到的方法，现场没windows电脑，未测试。
方法三：自己写个python迁移的脚本 网上没找到从人大金仓数据库迁移到mysql的脚本，需要自己写，比较耗费时间。
方法四：数据导出为csv文件再导入到mysql数据库中 此方法需要保证两边表结构一致，只适合仅迁移数据的情况。
操作步骤 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 进入容器 docker exec -it 容器名 bash # 找到ksql命令(/home/kingbase/install/kingbase/bin) find / -name ksql # 进入kingbase指定的数据库 ./ksql -U 用户名 -d 数据库名 # 列出所有表 SELECT * FROM sys_tables WHERE schemaname = &#39;public&#39;; # 查看特定表的详细结构 \d 表名; # 表中数据导出为csv文件 COPY public.表名 TO &#39;/home/kingbase/xxx.csv&#39; WITH (FORMAT CSV); # 把csv文件导入mysql表 利用idea导入csv文件到指定表   ]]></content></entry><entry><title>docker查看实时日志</title><url>/post/docker%E6%9F%A5%E7%9C%8B%E5%AE%9E%E6%97%B6%E6%97%A5%E5%BF%97/</url><categories/><tags/><content type="html">   需求 之前一直用 docker logs -f 容器ID 查看日志，遇到一个 问题，一旦打印的日志太多，好像是从上一次查看的位置 开始输出，导致终端在狂刷日志，而我只想看最新的日志。
显示最新日志 1 2 # 实时跟踪最新日志（先显示 N 行，再持续更新） docker logs -f --tail N &amp;lt;容器ID或名称&amp;gt;   </content></entry><entry><title>jar包解压与压缩</title><url>/post/jar%E5%8C%85%E8%A7%A3%E5%8E%8B%E4%B8%8E%E5%8E%8B%E7%BC%A9/</url><categories><category>java</category></categories><tags><tag>java</tag><tag>jar</tag></tags><content type="html">  需求 在特定场景下，可能只需要修改jar包里的某个配置或替换某个class文件。
jar包解压 1 2 3 4 5 6 # 方法一(推荐)：使用 unzip 解压到指定目录 unzip xxx.jar -d 指定解压路径 # 方法二：使用 jar 解压(只能解压到当前目录) mkdir	xxx cd xxx jar -xvf xxx.jar jar包压缩 1 2 # 使用 jar 压缩当前目录(压缩指定目录会把文件夹也一起压缩) jar -cfM /xxx/xxx.jar	.   </content></entry><entry><title>gnome健康休息提醒自定义休息时间设置</title><url>/post/gnome%E5%81%A5%E5%BA%B7%E4%BC%91%E6%81%AF%E6%8F%90%E9%86%92%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BC%91%E6%81%AF%E6%97%B6%E9%97%B4%E8%AE%BE%E7%BD%AE/</url><categories><category>linux</category></categories><tags><tag>linux</tag><tag>gnome</tag></tags><content type="html">  使用Dconf Editor 打开Dconf Editor，导航到 org -&amp;gt; gnome -&amp;gt; desktop -&amp;gt; break-reminders，然后选择 eyesight 或 movement（分别对应短时间休息和长时间休息）。在该路径下，可以设置 interval-seconds 来调整休息时间间隔
  </content></entry><entry><title>gnome自定义休息时间设置</title><url>/post/gnome%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BC%91%E6%81%AF%E6%97%B6%E9%97%B4%E8%AE%BE%E7%BD%AE/</url><categories><category>linux</category></categories><tags><tag>linux</tag><tag>gnome</tag></tags><content type="html">  使用Dconf Editor 打开Dconf Editor，导航到 org -&amp;gt; gnome -&amp;gt; desktop -&amp;gt; break-reminders，然后选择 eyesight 或 movement（分别对应短时间休息和长时间休息）。在该路径下，可以设置 interval-seconds 来调整休息时间间隔
  </content></entry><entry><title>更换Hugo Next 主题</title><url>/post/%E6%9B%B4%E6%8D%A2-hugo-next-%E4%B8%BB%E9%A2%98/</url><categories/><tags/><content type="html">   下载 hugo-theme-next-starter 1 2 3 git clone https://github.com/hugo-next/hugo-theme-next-starter cd hugo-theme-next-starter git submodule update --init --recursive 配置 编辑hugo.yaml 1 2 3 4 5 6 vim config/_default/hugo.yaml # 站点域名 baseURL: https://sxqs.fun # 站点标题 title: Dany 的个人小站 编辑params.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 vim config/_default/params.yaml # 站点基本信息 # Site Information Settings author: Dany subtitle: 上下求索 description: 你的要务不在于达成什么，而是待在当下此处。只管专注当下就行了。这能使你得到解脱，免于痛苦，免于恐惧，免于心智的束缚。 keywords: emacs,elisp,java # 知识共享国际许可 4.0 # 侧边栏显示 sidebar: false # 文章底部显示 post: false # 侧边栏头像 # 设置显示头像的相对路径 url: /imgs/head.png siteState: # 是否在侧边栏显示文章、分类、标签信息 basic: false # 站点访问信息 views: enable: false # 社交链接地址 social0: Github || https://github.com/sxqsfun || fab fa-github social1: E-Mail || mailto:78528291@qq.com || fa fa-envelope # 友情链接设置 # 显示标题 # Show title # 友情链接地址 links: #link0: Hugo-NexT || https://gitee.com/hugo-next/hugo-theme-next #link1: 凡梦星尘空间站 || https://lisenhui.cn # 站点开始年份，默认为当下时间的年份 since: 2019 # 国内 ICP 备案和公安网备信息 beian: enable: false # 站点支持供应商列表 vendors: enable: false # 文章的在线编辑 postEdit: enable: false # 右上角在 Github 上面关注我的横幅 githubBanner: enable: false   </content></entry><entry><title>更换Hugo Next 主题</title><url>/post/%E6%9B%B4%E6%8D%A2hugo-next-%E4%B8%BB%E9%A2%98/</url><categories><category>hugo</category></categories><tags><tag>hugo</tag></tags><content type="html">  下载 hugo-theme-next-starter 1 2 3 git clone https://github.com/hugo-next/hugo-theme-next-starter cd hugo-theme-next-starter git submodule update --init --recursive 配置 编辑hugo.yaml 1 2 3 4 5 6 vim config/_default/hugo.yaml # 站点域名 baseURL: https://sxqs.fun # 站点标题 title: Dany 的个人小站 编辑params.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 vim config/_default/params.yaml # 站点基本信息 # Site Information Settings author: Dany subtitle: 上下求索 description: 你的要务不在于达成什么，而是待在当下此处。只管专注当下就行了。这能使你得到解脱，免于痛苦，免于恐惧，免于心智的束缚。 keywords: emacs,elisp,java # 知识共享国际许可 4.0 # 侧边栏显示 sidebar: false # 文章底部显示 post: false # 侧边栏头像 # 设置显示头像的相对路径 url: /imgs/head.png siteState: # 是否在侧边栏显示文章、分类、标签信息 basic: false # 站点访问信息 views: enable: false # 社交链接地址 social0: Github || https://github.com/sxqsfun || fab fa-github social1: E-Mail || mailto:78528291@qq.com || fa fa-envelope # 友情链接设置 # 显示标题 # Show title # 友情链接地址 links: #link0: Hugo-NexT || https://gitee.com/hugo-next/hugo-theme-next #link1: 凡梦星尘空间站 || https://lisenhui.cn # 站点开始年份，默认为当下时间的年份 since: 2019 # 国内 ICP 备案和公安网备信息 beian: enable: false # 站点支持供应商列表 vendors: enable: false # 文章的在线编辑 postEdit: enable: false # 右上角在 Github 上面关注我的横幅 githubBanner: enable: false   </content></entry><entry><title>三观</title><url>/post/%E4%B8%89%E8%A7%82/</url><categories/><tags/><content type="html">   根基 必须知道的常识
我们都是必死的生物 我们都忽视了自己是必死的生物，我们才会有如是的行动。 死亡是行动唯一的动力来源。
生命是一个谜 再多的理性分析也都是一个谜。不要过多放纵于理性的执念，一切的烦恼都是庸人自扰！
大脑是一个反应器官 自主意识(本我)可能是不存在，以为的自我意识只是大脑的应激反应。 你控制不了大脑在想什么，它只是过往经历的反应而已。 趋利避害(懒惰)是内置的应激反应，人还有更理智的需求是和懒惰相反的。
拥有的只有此时此刻 过去和未来都不属于你，你拥有的只有此时此刻。 我们花费了大部分的精力在思考过去和未来，这是完全不可理喻的。
变才是唯一的规则 如果得不到想要的，就会受苦；得到不想要的东西，也会受苦；就连得到正好想要的东西，仍然会受苦，因为你无法永远拥有它。你的心智就是你 的困境。它想要免于改变，免于痛苦，免于生与死的必然性。然而，改变是一项法则，再怎么假装，都不能改变这个事实。 除非你挣脱内心的执念，不论发生什么事，只管自由自在，御风前行。
  </content></entry><entry><title>关于本站</title><url>/about.html</url><categories/><tags/><content type="html">  本站主要记录个人的学习笔记，以及一些在工作、生活中遇到的问题等。
  </content></entry><entry><title>docker容器人大金仓数据迁移到mysql</title><url>/post/%E4%BA%BA%E5%A4%A7%E9%87%91%E4%BB%93%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E5%88%B0mysql/</url><categories/><tags/><content type="html"><![CDATA[   方法一：用官方迁移工具KDTS 同事告知，用KDTS，从mysql迁移到人大金仓数据库没问题。 但从人大金仓数据库迁移到mysql会失败，原因未明。 KDTS工具为安装人大金仓数据库自带，没有独立版本。 docker版本的人大金仓数据库没有此公具。
方法二：用navicat的数据传输 网上找到的方法，现场没windows电脑，未测试。
方法三：自己写个python迁移的脚本 网上没找到从人大金仓数据库迁移到mysql的脚本，需要自己写，比较耗费时间。
方法四：数据导出为csv文件再导入到mysql数据库中 此方法需要保证两边表结构一致，只适合仅迁移数据的情况。
操作步骤 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 进入容器 docker exec -it 容器名 bash # 找到ksql命令(/home/kingbase/install/kingbase/bin) find / -name ksql # 进入kingbase指定的数据库 ./ksql -U 用户名 -d 数据库名 # 列出所有表 SELECT * FROM sys_tables WHERE schemaname = &#39;public&#39;; # 查看特定表的详细结构 \d 表名; # 表中数据导出为csv文件 COPY public.表名 TO &#39;/home/kingbase/xxx.csv&#39; WITH (FORMAT CSV); # 把csv文件导入mysql表 利用idea导入csv文件到指定表   ]]></content></entry><entry><title>echarts热力图数据聚合</title><url>/post/echarts%E7%83%AD%E5%8A%9B%E5%9B%BE%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88/</url><categories/><tags/><content type="html"><![CDATA[   问题 echarts热力图渲染数据超过2万会感觉明显卡顿
解决办法 后端通过网格将数据聚合，压缩数据量
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 // 网格聚合核心方法 public static JSONArray gridAggregate(JSONArray points, int xGridSize, int yGridSize) throws JSONException { if(points.size() &lt;= 20000){ return points; } // 1. 计算坐标范围 double minX = 0, maxX = 0, minY = 0, maxY = 0; for (int i = 0; i &lt; points.size(); i++) { JSONArray point = points.getJSONArray(i); double x = point.getDouble(0); double y = point.getDouble(1); if(i == 0){ minX = x; maxX = x; minY = y; maxY = y; }else{ minX = Math.min(minX, x); maxX = Math.max(maxX, x); minY = Math.min(minY, y); maxY = Math.max(maxY, y); } } // 2. 初始化网格容器 (使用网格坐标作为Key) TreeMap&lt;String, List&lt;Double&gt;&gt; gridMap = new TreeMap&lt;&gt;(); double gridWidth = (maxX - minX) / xGridSize; double gridHeight = (maxY - minY) / yGridSize; // 3. 点分配到网格 for (int i = 0; i &lt; points.size(); i++) { JSONArray point = points.getJSONArray(i); double x = point.getDouble(0); double y = point.getDouble(1); double value = point.getDouble(2); int gridX = (int) ((x - minX) / gridWidth); int gridY = (int) ((y - minY) / gridHeight); String gridKey = gridX + &#34;_&#34; + gridY; gridMap.computeIfAbsent(gridKey, k -&gt; new ArrayList&lt;&gt;()).add(value); } // 4. 生成聚合数据 (使用平均值策略) JSONArray aggregatedData = new JSONArray(); for (Map.Entry&lt;String, List&lt;Double&gt;&gt; entry : gridMap.entrySet()) { String[] keys = entry.getKey().split(&#34;_&#34;); int gridX = Integer.parseInt(keys[0]); int gridY = Integer.parseInt(keys[1]); // 计算网格中心坐标 double centerX = minX + (gridX + 0.5) * gridWidth; double centerY = minY + (gridY + 0.5) * gridHeight; // 计算平均值 double avgValue = entry.getValue().stream() .mapToDouble(Double::doubleValue) .average() .orElse(0.0); // 构建新数据点 [x, y, value] JSONArray newPoint = new JSONArray(); newPoint.put(new BigDecimal(centerX).setScale(2, RoundingMode.DOWN).intValue()); newPoint.put(new BigDecimal(centerY).setScale(2, RoundingMode.DOWN).doubleValue()); newPoint.put(new BigDecimal(avgValue).setScale(6, RoundingMode.DOWN).doubleValue()); aggregatedData.put(newPoint); } //System.out.println(&#34;原始点数: &#34; + points.size()); //System.out.println(&#34;聚合后点数: &#34; + aggregatedData.size()); aggregatedData.sort((o1, o2) -&gt; { JSONArray points1 = (JSONArray) o1; JSONArray points2 = (JSONArray) o2; return points1.getInt(0).compareTo(points2.getInt(0)); }); return aggregatedData; }   ]]></content></entry><entry><title>gnome健康休息提醒自定义休息时间设置</title><url>/post/gnome%E4%BC%91%E6%81%AF%E6%8F%90%E9%86%92%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%B6%E9%97%B4%E8%AE%BE%E7%BD%AE/</url><categories/><tags/><content type="html">   使用Dconf Editor 打开Dconf Editor，导航到 org -&amp;gt; gnome -&amp;gt; desktop -&amp;gt; break-reminders， 然后选择 eyesight 或 movement（分别对应短时间休息和长时间休息）。 在该路径下，可以设置 interval-seconds 来调整休息时间间隔
  </content></entry><entry><title>站点示例</title><url>/flinks.html</url><categories/><tags/><content type="html">  如想交换本站友情链接，请在评论区留下你的站点信息，格式参考如下：
1 2 3 4 - name: Hugo-NexT desc: Hugo NexT 官方预览网站。 avatar: https://hugo-next.eu.org/imgs/hugo_next_avatar.png link: https://hugo-next.eu.org   </content></entry></search>